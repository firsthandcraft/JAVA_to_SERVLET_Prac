select * from tab;
desc employees;
--select는 검색
--모든열 선택 p55o
select  *  from employees;
select  *  from departments;
--특정열선택o
select department_id , location_id
 from departments;
--산술연산자 사용 p59o
select last_name, salary, salary+300
from employees;
--연산자 우선 순위 p62
select last_name, salary, 12*salary+100
from employees;
--연산자 괄호사용p63
select last_name, salary, 12*(salary+100)
from employees;
--널값정의 p64
select last_name,job_id, salary, commission_pct
from employees;
--열 별칭정의p66
select last_name AS name , commission_pct comm
from employees;
select last_name "NAME" , salary*12 "Annual Salary"
from employees;
--연결연산자 p68
select last_name || job_id AS "Employees"
from employees;
--[문제1] employees 테이블에서 employee_id, last_name과  first_name은 연결해서 표시하고(공백으로 구분) 열 별칭은 화면예 
--처럼 보고서 작성해 주세요.
--    Emp# Employee Name
------------ ------------------------------
--       100 King Steven
--       101 Kochhar Neena
--       102 De Haan Lex
--       103 Hunold Alexander
--       104 Ernst Bruce
select employee_id "Emp#", last_name || ' ' || first_name 
 "Employee Name" from employees;
 --리터럴 문자 사용 
 select last_name || ' is a ' || job_id AS 
 "Employee Details" from employees;
 --중복행
  select department_id
 from employees;
 --중복행 제거 
   select distinct department_id
 from employees;
 --문제 2 employees;테이블에서 컬럼중에  last_name job_id연결해서 표시하고 쉼표와 공백으로 구분 열 별칭은 화면의 예철머 보고서 작성
 --Employee and Title
--Abel, SA_REP
 --Ande, SA_REP
 select last_name  || ', ' ||  job_id  "Employee and Title"  
 from employees;
-- 문제 3departments; 테이블에 있는 데이터에서 department_name,manager_id컬럼을 가지고 있는 화면의 결과 처럼 출력하는 쿼리문장 만들기 
--Department and Manager
--AdministrationDepartment 's  Manager Id:200
--MarketingDepartment 's  Manager Id:201
 select department_name || q'[Department 's  Manager Id:]' ||  manager_id as "Department and Manager"
 from departments;
 --오류 : '작은 따옴표 잘 구분해서 쓰기 
 
 -- 선택되는 행 제한 p94
-- select * { [distinct] colum  expression [alias],...} 
-- from table
-- [where condition(s)];

--where절 사용 p95 -만족하는 행만 질의 함
--condition  열이름, 표현식, 상수, 미치 연산자로 구성
select  employee_id, last_name,job_id,department_id
 from employees
where department_id=90;

select  employee_id, last_name,job_id,department_id
 from employees
where last_name='Whalen';

--문제 4 employees 테이블에서 급여가 3000보다 작거나 같은 사원들의 last_name,salary를 출력
select  *  from employees;
select  last_name,salary
 from employees
where salary<= 3000;

--and 사용
select  *  from employees;
select  last_name,salary
 from employees
where salary >= 2500 and  salary <=3000;

-- 위 쿼리문과 같은말//  between 조건 사용
select  *  from employees;
select  last_name,salary
 from employees
where salary between 2500 and 3000;--2500 // 3000포함

--in 조건 사용p101
select  employee_id,last_name,salary,manager_id
 from employees
where manager_id in(100,101,201);--관리자의 사원 번호가 100,101,201인 모든 사원의 번호, 이름, 급여 및 관리자의 사원번호 표시

select  employee_id,last_name,salary,manager_id
 from employees
where last_name in('Hartstein','Vargas');

--문제 6 사원의 이름 성이 Gee이거나 Smith 인사원의 정보를 얻자
--출력결과 >사원번호> 이름 성 > 부서ID>직무ID
select  employee_id,last_name,department_id,job_id
 from employees
where last_name in('Gee','Smith');

--문제 7 부서번호가 50,80인 부서원중 월급이 8000이상인 사원의 정보를 얻자 
--출력결과 사원번호,이름성,부서ID,직무ID
select  employee_id,last_name,department_id,job_id
from employees
where department_id in (50,80) and salary <=8000;

--LIKE 조건사용p102
select first_name
from employees
where first_name like 'S%';--S 가 처음으로 들어간  first_name필터화함
--%일련의 문자를 나타내고 -문자하나를 나타냄

--05로 시작하는 문자 검색 05%
--05로 끝나는 문자 검색  %05
-- %05% --05가 들어가는 문자 검색
-- '_05%' --두번째 문자에 05가 들어가는 문자 검색


select * from employees;
select first_name,hire_date
from employees
where first_name like 'S%';

--문제 8 employees테이블에 있는 데이터 중에 job_id 가 SA로 시작되고 급여는 10000이상을 받는 사원들의 모든 정보를 출력
select  *
from employees
where  job_id like 'SA%' and salary>=10000;

select employee_id,last_name,job_id
from employees
where job_id like '%SA\_%' escape '\';--\백슬래시는 이스케이프문자로 식별_만 넣고 \는 뺀다는 의미 
--%나 _(언더바) 는 리터럴 문자를 결합할때 사용하기 때문에 %_를 사용할때는 \이스케이프 문자 사용한다.

--문제 9 last_name의 세번째 문자기 a또는 e 가 포함된 모든사원의 last_name출력
select last_name
from employees
where  last_name like '__a%' or   last_name like '__e%';

--문제 10 
--2005년 입사자중에서 SA영업사원이거나 급여3000이하 받는사원의 정보를 얻자
--사원번호 이름 성, 입사일자, 직무ID,급여
select employee_id,last_name,hire_date,job_id,salary
from employees
where hire_date like '05%' and (job_id like 'SA%' or salary<=3000);

--todate('2005/01/01','yyyy/mm/dd') 명확한 날짜 기준을 잡는 함수 
--오라클에서 문자열을 날짜형 테이터로 형변환
--todate('2005/12/31 23:59:59','yyyy/mm/dd hh24:mio:ss');

-- 문제 11 employees테이블에 있는 데이터 중에 job_id 가 SA로 시작되고 급여는 10000이상을 받고 hire_date 2005년도에 입사한 모든 사원의 정보를 출력
--20051.1 200512.31
--출력화면 5명 나옴
--146 Karen  Partners  KPARTNER  011.44.1344.467268  05/01/05  SA_MAN  13500  0.3  100  80
--147 Alberto   Errazuriz    AERRAZUR...
select *
from employees
where job_id like 'SA%' and salary>=10000 
and hire_date >=to_date('2005/01/01','yyyy/mm/dd')
and hire_date<=to_date('2005/12/31 23:59:59','yyyy/mm/dd hh24:mi:ss');

--위의 커리문 between으로 작성하기
select *
from employees
where job_id like 'SA%' and salary>=10000 
and hire_date between to_date('2005/01/01','yyyy/mm/dd')
and to_date('2005/12/31 23:59:59','yyyy/mm/dd hh24:mi:ss');


--문제 12 employees테이블에서job_id 칼럼의 값이 SA_REP또는 AD_PRES 사원들중에 급여가 10000초과한 사원들의 모든 정보 출력

select *
from employees
where job_id in( 'SA_REP', ' AD_PRES') and salary>10000;

select *
from employees
where ( job_id= 'SA_REP'  or  job_id=' AD_PRES') and salary >10000;
--오류 : 띄어쓰기 유의 하기 

--null 조건 
select last_name,hire_date,job_id,commission_pct
from employees
where commission_pct is NULL;--null일경우

select last_name,hire_date,job_id,commission_pct
from employees
where commission_pct is not NULL;--null이 아닐경우


--문제 12
--부서를 발령받지 않은 사원의 정보를 얻자
--출력결과 사원번호 이름성, 입사일자, 부서 ID
select employee_id,last_name,hire_date,department_id
from employees
where department_id is NULL;

--논리조건p106
--and
select employee_id,last_name,hire_date,salary
from employees
where salary>=10000
and job_id like '%MAN%';

--or
select employee_id,last_name,hire_date,salary
from employees
where salary>=10000
or job_id like '%MAN%';

--not
--문제 job_id 값이 IT_PROG,ST_CLERK,SA_REP 가 아닌 모슨 사원의 last_name,jod_id출력

select  last_name,job_id
from employees
where  job_id not in('IT_PROG','ST_CLERK','SA_REP');

select  last_name,job_id
from employees
where ( job_id != 'IT_PROG'and  job_id !='ST_CLERK'and  job_id !='SA_REP');


-- 우선순위 규칙
--1산술연산 2 연결연산 3 비교조건 4.is [not] NULL,LIKE [not]IN  5.[not]between  6. not논리조건 7.and논리 조건 8.or 논리조건
select last_name,job_id,salary
from employees
where job_id = 'SA_REP'--1번조건 순서1
or job_id = 'AD_PRES'--3번조건 순서3
and salary >15000;--2번조건 순서2

--문제 13 2006년도에 입사한 사원의 employee_id,last_name,hire_date를 출력해주세요
select employee_id,last_name,hire_date
from employees
where hire_date >=to_date('2006/01/01','yyyy/mm/dd')
and  hire_date <to_date('2007/01/01','yyyy/mm/dd');

select employee_id,last_name,hire_date
from employees
where hire_date between to_date('2006/01/01','yyyy/mm/dd')
and to_date('2006/12/31 23:59:59','yyyy/mm/dd hh24:mi:ss');

--문제 14 80번 department_id 사원중에// commission_pct 값이 0.2나오고 //
--job_id는 SA_MAN 인// 사원의 employee_id ,last_name,salary를 출력
select employee_id ,last_name,salary
from employees
where department_id like (80) and commission_pct like(0.2) and job_id like('SA_MAN') ;

select employee_id ,last_name,salary
from employees
where department_id =80 and commission_pct =0.2 and job_id like('SA_MAN') ;

--문제 15 salary가 5000~1200의 범위에 속하지 않는 모든 사원의 last_name,salary를 출력
select  last_name,salary
from employees
where salary <5000 or  salary >12000 ;

select   last_name,salary
from employees
where salary not between 5000 and 12000;

--orderby 절 p112
--asc 오름차순 기본값
--desc 내림차순
--sele 

--문제16 Matos 및 Taylor 라는 last_name을 가진 사원의last_name,job_id,hire_date를 출력해주세요
--hire_date를 기준르오 오름차순으로 출력되도록
select  last_name,job_id,hire_date
from employees
where  last_name = 'Matos' or last_name = 'Taylor'
--order by hire_date; --기본값이 오름차순이라 가능
--order by hire_date asc; asc가 생략됨 
order by 3;--3번째 열 hire_date를 기준으로 오름차순으로 정렬


select  last_name,job_id,hire_date
from employees
where  last_name = 'Matos' or last_name = 'Taylor'
order by 3 desc;--3번째 열 hire_date를 기준으로 내림차순으로 정렬

select  last_name,job_id,hire_date
from employees
where  last_name in('Matos', 'Taylor')
order by 3 desc;--3번째 열 hire_date를 기준으로 내림차순으로 정렬

-- 열 별칭을 기준으로 정렬
select employee_id,last_name,salary*12 annsal22 --annsal22는 커스텀 값
from employees
order by annsal22;

--여러열을 기준으로정렬
select employee_id,last_name,department_id,salary
from employees
order by department_id,salary desc;--모든 사원의 이름과 급여를 표시하고 부서번호를 기준으로 정렬한 후 급여를 기준으로 내림차순으로 결과 지원
----------------------------------------------------------------------------------------------10.20
--문제 17 commission_pct에 null이 아닌 모든 사원의 last_name,salary,commission_pct를 출력해주세요
--salary ,commission_pct의 데이터를 내림차순으로 정렬
select  last_name,salary,commission_pct
from employees
where commission_pct is not null
order by salary ,commission_pct desc;

select  last_name,salary,commission_pct
from employees
where commission_pct is not null
order by salary ,commission_pct desc;

--문제 17에서 2번째 기준으로 정리
select  last_name,salary,commission_pct
from employees
where commission_pct is not null
order by 2 desc;--3번째 기준일때 order by 3 desc;

--문제 18 employees 테이블에서 department_id부서코드가 50번 사원들중에 
--last_name에 두번째 위치에 a글자가 있는 사원들을 조회하세요.
select last_name
from employees
where department_id =50 and last_name like '_a%';

-- 문자 함수 p129
--대소문자 조작 함수 
--//lower  //upper //intcap // concat //substr

--substr 함수는 문자 단위로 시작 위치와 자를 길이를 지정하여 문자열을 자른다. //= like
--substr(column expression,m,n) 문자값의 위치 m에서 n까지 지정된 문자를 반환한다. m이 음수일 경우 문자값의 끝부터 센다.
--n을 생략할 경우 모든 문자를 반환한다. 
select last_name
from employees
where department_id =50 and substr(last_name,2,1)='a';

--lower
--알파벳값을 소문자로 변환
select lower('SQL Course') 
from dual;--'sql course로 '값이 소문자로 변환해서 나온다. 
--dual =더미테이블 //  간단하게 함수를 이용해서 계산 결과값을 확인 할 때 사용하는 테이블
--단순계산 산술,함수 결과 등 쿼피 결과를확인 할수 있는 임시 테이블


--upper //대문자로 변환
select upper('SQL Course') 
from dual;

--initcap  //첫글자만 대문자로 변환하고 나머지는 소문자로 변환
select initcap('SQL Course') 
from dual;

--concat  //문자의 값을 연결
select concat(concat('SQL',' Course'),'!') 
from dual;

--length //표현식의 문자를 반환
select length('SQL Course') 
from dual; --10

--instr//지정된 문자열의 위치를 숫자로 반환 , 검색 시작 위치와 m과 문자열의 발생 횟수n을 지정가능
--instr(column expression,'string',m,n)
--https://gent.tistory.com/22
select last_name
from employees
where instr(last_name,'i')>0;

SELECT INSTR('Oracle Database 12c Release', 'as', 1,2) AS result1 --25
     -- //위의 1은 문자열의 첫 글자 as의 a부터 검색할 경우 생략가능
     --//1은 처음 Database 의 as의 자리 숫자이고 2는 Release의 as 자리숫자이다.
     --//1,2번까지 이니 두번째 값이 나오는것임
     , INSTR('Oracle Database 12c Release', 'as')    AS result2 --13
  FROM dual;
  
  -- INSTR 문자열 자르기 SUBSTR 함수와 함께 문자열을 자를 때 많이 사용한다.
WITH temp AS (
    SELECT 'Oracle Database 12c Release' AS oracle_ver FROM dual
)

SELECT SUBSTR(oracle_ver, INSTR(oracle_ver, 'Database')) AS result1
     , SUBSTR(oracle_ver, INSTR(oracle_ver, 'Database'), 4) AS result2
  FROM temp;

--lpad, rpad// 전체 폭이 n이 되도록 10이되는것 문자의 값을 오른쪽 정렬하고 빈곳을 string 으로 채워준다. 
select RPAD (salary,10,'*')
from employees;--24000***** 문자 왼쪽에 string을 채움 
select LPAD(salary,10,'*')
from employees;--*****24000 문자 오른족에 string을 채움

-- trim //문자열의 왼쪽 좌측 공백 제거 , 문자 왼쪽 반복적인 문자를 제거함
select trim(salary,10,'*')
from employees;
--Ltrim
--Rtrim  이 있다. https://araikuma.tistory.com/523


-------------------------날짜에 관한 문제 ()중요!
--문제 19  사원의 last_name,hire_date 및 근무 6개월 후 월요일에 해당하는 날짜를 조회하세요 별칭은 REVIEW로 지정
select last_name,hire_date,
next_day(add_months(hire_date,6),'월요일' ) "REVIEW"
from employees; 
--next_day(add_months(hire_date,6)-> month를 6개월 더한다.  ,'월요일' )  -> 별칭 바꾸기 "REVIEW"

--NEXT_DAY 함수는 기준일자의 다음에 오는 날짜를 구하는 함수이지만 기준 일자에서 8일을 빼주면 이전 요일에 해당하는 날짜를 구할수 있다. 
--ADD_MONTHS 날짜의 월을 빼거나 더하기 위해서는 DAA_MONTHS함수를 사용. 날짜의일은 변경안되며 연산값에 따라서 년도와 월만 변경된다. 
--TO_CHAR()함수는 날짜, 숫자 등의 값을 문자열로 변환하는 함수 임

--문제 20 사원의employees; 있는 last_name, hire_date 및 근무 6개월 후 첫번째 월요일에 해당하는 급여 협상 날짜를 표시 
--열테이블을REVIEW로 지정날짜는 월요일 ,the Second of 4 , 2007과 유사한 형식으로 지정
--   ['        {",the      ("Second ")     of"}     4 , 2007   ']
select last_name,hire_date,
to_char(next_day(add_months(hire_date,6),'월요일' ) ,'day')||
to_char(next_day(add_months(hire_date,6),'월요일' ) ,' ",the"Ddspth"of"MM yyyy')"REVIEW"
from employees; 

--to_char
SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')              --20200723
     , TO_CHAR(SYSDATE, 'YYYY/MM/DD')            --2020/07/23
     , TO_CHAR(SYSDATE, 'YYYY-MM-DD')            --2020-07-23
     , TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') --2020-07-23 11:10:52
  FROM dual;
  
SELECT TO_CHAR(SYSDATE, '""YYYY"년 "MM"월 "DD"일"') --2020년 07월 23일
     , TO_CHAR(SYSDATE, '""HH24"시 "MI"분 "SS"초"') --11시 12분 20초
  FROM dual;
  
  SELECT TO_CHAR(SYSDATE, 'D')   --5 : 1(일)~7(토)
     , TO_CHAR(SYSDATE, 'DY')  --목
     , TO_CHAR(SYSDATE, 'DAY') --목요일
  FROM dual;
  --concat('SQL',' Course'),'!') 
----todate('2005/01/01','yyyy/mm/dd') 명확한 날짜 기준을 잡는 함수 

--문제21 employees 테이블에서 일요일에 입사한 사원의 정보 조회
select last_name,hire_date
--,to_char((hire_date,'day' ) =' 일요일')"REVIEW"
from employees
where to_char(hire_date,'day')='일요일' ;

--문제 23  []21 
--last_name 칼럼의 값 중에 "J,A,M시작"또는 //1
--첫문자 대문자 나머지 소문자  //2 oo
--last_name의 길이 표시//3 oo
--오름 차순

--함수안쓰고 
select initcap(last_name) ,length(last_name)
from employees 
where last_name like'J%' or last_name like 'A%' or last_name like 'M%'
order by last_name;
--= 같은의미 
--substr
select initcap(last_name) ,length(last_name)
from employees 
where substr(last_name,1,1)in('J','A','M')
order by last_name;
--같은 의미
--INSTR 문자열 검색할 문자 시작 지섬 ,n번째 검색 단어 //함수는 찾는 문자의 위치를 반환=like 절과 비슷
select initcap(last_name) ,length(last_name)
from employees 
--where substr(last_name,1,1)in('J','A','M')
where instr(last_name, 'J')=1 or instr(last_name, 'A')=1 or  instr(last_name, 'M')=1
order by last_name;

--오류 : %는 like에서만 되는 쿼리
select initcap(last_name) ,length(last_name)
from employees 
where( last_name ='J%' or last_name= 'A%' or last_name = 'M%')
order by last_name;
--오류 : %는 like에서만 

--별칭붙이기 NAME,LENGTH
--select initcap(last_name)"NAME" ,length(last_name)"LENGTH"
select initcap(last_name) as"NAME" ,length(last_name)as"LENGTH"
from employees 
where last_name like'J%' or last_name like 'A%' or last_name like 'M%'
order by last_name;

--문제 22 department_id 가 50번 사원들중에 last_name에 두번쨰 위치에 a글자가 있는 사원들 조회 
--3가지 방식으로 like.str instr
--like
select  last_name,department_id
from employees
where department_id =50 and last_name like '_a%';

--substr
select  last_name,department_id
from employees
where department_id =50 and substr( last_name, 2,1)in( 'a');

--instr
select  last_name,department_id
from employees
where department_id =50 and instr( last_name ,'a')=2;

--round 함수 : 반올림함수  
--문제 23 employees 테이블에 있는 employee_id ,last_nbame,salary salary는 10% 인상된 급여를 계산하면서 계산된
--급여는 소수점은 반올림해서 정수값으로 표현하고 열별칭은 New salary로 표시 
select   employee_id,last_name, salary,round(salary*1.1) "New salary"
from employees;

--trunc 함수 : 소수점 n째 자리까지 남기고 버림

--mod 함수 : x/y나눈나머지 반환 -- 홀수 짝수 인지 구분하는데 많이 사용
select last_name, job_id, salary,MOD(salary,5000)
from employees
where job_id = 'SA_REP';

--문제 24 짝수달의 입사한 사원의 정보 조회
--so_number():문자로 넘어온 것을 숫자로 변환
select last_name,to_char(hire_date,'mm')"mon"
from employees
where mod( to_number( to_char(hire_date,'mm')),2)=0;

--문제 2006년도 홀수 달에 입사한 사원의 employee_id,last_name,hire_date를 조회
----todate('2005/01/01','yyyy/mm/dd') 명확한 날짜 기준을 잡는 함수 
select employee_id,last_name,to_char(hire_date,'mm')"홀수달"
from employees
where hire_date >= to_date('2006/01/01','yyyy/mm/dd') 
and hire_date<=to_date('2007/01/01','yyyy/mm/dd')
and mod(to_number( to_char(hire_date,'mm')),2)!=0;
--오답 노트 : to number , to_char 를 안썻다. 

--문제 26 오늘과 2007년 1월 1일간의 개월수는?
--months_between(n,m) n과 m사이의 개월수를 숫자로 리턴
--sysdate :오늘 날짜를 알려줌
select trunc( months_between(sysdate,to_date('2007/01/01','yyyy/mm/dd')))"answer"
from dual;--189

select  sysdate
from dual;--22/10/20

--날짜 사이의 차이 
select trunc(sysdate- to_date('20070101','yyyymmdd'))
from dual;--5771

where
and month_between();
--and sysdate<=to_date('2008/01/01','yyyy/mm/dd'));
select  to_char(sysdate,'mm')
from dual;
to_char(to_date('2006/01/01','yyyy/mm/dd') ,'mm'))


select* from employees;

--문제 27 15년이상 근무한 사원들의 사원 번호 , 입사날짜 , 근무 개월수 를 조회하세요
--month로 별칭
select employee_id,hire_date,trunc(months_between(sysdate,hire_date))"months"
from employees
where months_between(sysdate,hire_date)>=15*12;

--NVL 함수는 값이 NULL인 경우 지정값을 출력하고, NULL이 아니면 원래 값을 그대로 출력한다.
-- 함수  :  NVL("값", "지정값") 
--NVL(컬럼,NULL일경우 반환값) 
--NVL(컬럼,0) -- 컬럼의 값이 NULL일경우 0으로 치환
--NVL(컬럼,'') -- 컬럼의 값이 NULL일경우 ''으로 치환
--NVL(컬럼,SYSDATE) --컬럼의 값이 NULL일경우 현재날짜로 치환

--사원테이블employee 에 last_name , salary,commission_pct값이 아니면( salary*12) +(salary*12commission_pct)
--값이 수행되고 null아니면 salary*12 가 수행할 수 있도록 ann_sal생성하기
select last_name , salary,nvl(commission_pct,0), (salary*12)+(salary*12*NVL(commission_pct,0))"ann_sal"
from employees;

--NVL2 함수는 NULL이 아닌 경우 지정값1을  출력하고, NULL인 경우 지정값2를 출력한다.
-- 함수 :  NVL2("값", "지정값1", "지정값2") // NVL2("값", "NOT NULL", "NULL") 
--NVL2('컬럼','NULL이 아닐 경우 반환값','NULL일경우 반환값')
--NVL2(컬럼,'정규직','비정규직') -- 컬럼의 값이 NULL이 아닐경우 정규직 NULL일경우 비정규직
--NVL2(컬럼,'남','여') -- 컬럼의 값이 NULL이 아닐경우 남 NULL일경우 여

--사원테이블employee 에 last_name , salary,commission_pct값이 
--null 아니면( salary*12) +(salary*12commission_pct)
--null 이면 salary*12 가 수행할 수 있도록 ann_sal생성하기
select last_name , salary,NVL2(commission_pct,'있','없')"여부",
NVL2(commission_pct,
(salary*12)+(salary*12*commission_pct),salary*12)"ann_sal"
from employees
order by commission_pct;

--COALESCE
--select COALESCE('A','B','C')as COALESCE_test from dual union all
--CASE WHEN expr1 IS NOT NULL THEN expr1 ELSE expr2 END
--조건 a에 따라 null이면b아니면c
--select COALESCE(NULL,'B','C') from dual union all
--select COALESCE('A','B','C') from dual 

select last_name , salary,commission_pct,
COALESCE(commission_pct,(salary*12)+(salary*12*commission_pct),salary*12)"ann_sal"
from employees;
select last_name , salary,commission_pct,
COALESCE((salary*12)+(salary*12*commission_pct),salary*12)"ann_sal"
from employees;

--decode 함수=if 문
--문제 28 job_id 열의 값을 기반으로 모든 사원의 등급을 표시하는것 만들기
select  job_id,salary from employees;
select  job_id ,
CASE job_id
WHEN 'AD_PRES' THEN 'A' 
WHEN 'ST_MAN' THEN 'B'
WHEN 'IT_PROG' THEN 'C'
 WHEN 'SA_REP' THEN 'D'
WHEN 'ST_CLERK' THEN 'E'
ELSE 'Z' 
end "GRADE"
from employees;
--=
select  job_id ,
DECODE( job_id,
 'AD_PRES' , 'A' ,
'ST_MAN' , 'B',
 'IT_PROG' , 'C',
  'SA_REP' , 'D',
'ST_CLERK' , 'E',
 'Z' )
"GRADE"
from employees;

--decode
select  job_id,salary from employees;
select  job_id ,
DECODE( job_id,
 'AD_PRES' , '1.10*salary' ,
  'ST_CLERK' , '1.15*salary',
  'SA_REP' , '1.20*salary','그외 나머지 값에 넣을 이름')
"변경이름"
from employees;


--문제 29 decode case로 바꾸기 
--사원테이블employee 에 last_name , salary,commission_pct값이 아니면( salary*12) +(salary*12commission_pct)
--값이 수행되고 null아니면 salary*12 가 수행할 수 있도록 ann_sal생성하기
select  last_name , salary,commission_pct,
CASE 
WHEN commission_pct is NULL THEN salary*12
ELSE (salary*12)+(salary*12*commission_pct)
end "ann_sal"
from employees;

select last_name , salary,commission_pct,
DECODE( commission_pct,null,
salary*12,
 (salary*12)+(salary*12*commission_pct)) "ann_sal"
from employees;



select * from all_tables;



